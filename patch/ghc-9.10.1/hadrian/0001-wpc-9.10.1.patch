From 672a3d816329cf04282398d448e042c333bd5dca Mon Sep 17 00:00:00 2001
From: Csaba Hruska <csaba.hruska@gmail.com>
Date: Mon, 28 Oct 2024 15:19:09 +0100
Subject: [PATCH 1/2] wpc 9.10.1

---
 hadrian.cabal    |  1 +
 src/Rules.hs     |  2 ++
 src/Rules/WPC.hs | 80 ++++++++++++++++++++++++++++++++++++++++++++++++
 stack.yaml       |  2 +-
 4 files changed, 84 insertions(+), 1 deletion(-)
 create mode 100644 src/Rules/WPC.hs

diff --git a/hadrian.cabal b/hadrian.cabal
index db888b7..8d8ed87 100644
--- a/hadrian.cabal
+++ b/hadrian.cabal
@@ -75,6 +75,7 @@ executable hadrian
                        , Oracles.TestSettings
                        , Packages
                        , Rules
+                       , Rules.WPC
                        , Rules.BinaryDist
                        , Rules.CabalReinstall
                        , Rules.Clean
diff --git a/src/Rules.hs b/src/Rules.hs
index 55de341..536c9e0 100644
--- a/src/Rules.hs
+++ b/src/Rules.hs
@@ -14,6 +14,7 @@ import Expression
 import qualified Oracles.Flavour
 import qualified Oracles.ModuleFiles
 import Packages
+import qualified Rules.WPC
 import qualified Rules.BinaryDist
 import qualified Rules.CabalReinstall
 import qualified Rules.Compile
@@ -128,6 +129,7 @@ packageRules = do
 
 buildRules :: Rules ()
 buildRules = do
+    Rules.WPC.foundationpakRules
     Rules.BinaryDist.bindistRules
     Rules.Generate.copyRules
     Rules.Generate.generateRules
diff --git a/src/Rules/WPC.hs b/src/Rules/WPC.hs
new file mode 100644
index 0000000..5829a18
--- /dev/null
+++ b/src/Rules/WPC.hs
@@ -0,0 +1,80 @@
+module Rules.WPC where
+
+import Expression
+import Oracles.Setting
+import qualified Data.List.Extra as IO
+import qualified System.Directory.Extra as IO
+import qualified System.FilePath as IO
+
+foundationpakRules :: Rules ()
+foundationpakRules = do
+    root <- buildRootRules
+    phony "foundation-pak-dir" $ do
+        need ["binary-dist-dir"]
+
+        {-
+          IDEA: keep full stage2, but ignore 'library' related mopaks and ar files
+        -}
+        version        <- setting ProjectVersion
+        targetPlatform <- setting TargetPlatformFull
+        let ghcVersionPretty  = "ghc-" ++ version ++ "-" ++ targetPlatform
+            ghcBuildDir       = root -/- stageString Stage2
+            foundationpakDir  = root -/- "foundation-pak" -/- ghcVersionPretty
+            ignoredDirs = [ ghcBuildDir -/- "compiler"
+                          , ghcBuildDir -/- "libraries"
+                          , ghcBuildDir -/- "rts"
+                          ]
+        createDirectory foundationpakDir
+
+        -- copy wpc related files
+        files <- liftIO $ IO.listFilesRecursive ghcBuildDir
+        forM_ files $ \file -> do
+          when ("extra-compilation-artifacts" `isInfixOf` file || "_ghc_stgapp" `isSuffixOf` file) $ do
+            -- HINT: ignore duplication of lib & libraries
+            unless (any (`isPrefixOf` file) ignoredDirs) $ do
+              -- copy normal wpc related file
+              copyFileUntracked file (foundationpakDir -/- IO.makeRelative ghcBuildDir file)
+
+        -- collect foundation packages list
+        pkgDirList <- liftIO $ collectUnitDirs (foundationpakDir -/- "lib")
+
+        -- generate 'pak.yaml' descriptor file
+        absoluteGhcBuildDir <- liftIO $ IO.makeAbsolute ghcBuildDir
+        liftIO $ writeFile (foundationpakDir -/- "pak.yaml") $ unlines $
+          [ "path-prefix: " ++ show absoluteGhcBuildDir
+          , "packages:"
+          ] ++
+          [ unlines
+            [ "  -"
+            , "    name: " ++ show pkgName
+            , "    version: " ++ show pkgVersion
+            , "    id: " ++ show pkgId
+            , "    dir: " ++ show pkgDir
+            ]
+          | absoluteDirPath <- pkgDirList
+          , let pkgId = IO.takeFileName absoluteDirPath
+          , let pkgDir = IO.makeRelative foundationpakDir absoluteDirPath
+          , Just (pkgNameVersion, _) <- [IO.stripInfixEnd "-" pkgId]
+          , Just (pkgName, pkgVersion) <- [IO.stripInfixEnd "-" pkgNameVersion]
+          ]
+
+    phony "foundation-pak" $ do
+        need ["foundation-pak-dir"]
+
+        version        <- setting ProjectVersion
+        targetPlatform <- setting TargetPlatformFull
+        let ghcVersionPretty  = "ghc-" ++ version ++ "-" ++ targetPlatform
+
+        -- Finally, we create the archive <root>/foundation-pak/ghc-X.Y.Z-platform.pak.tar.zst
+        tarPath <- builderPath (Tar Create)
+        cmd [Cwd $ root -/- "foundation-pak"] tarPath
+            [ "-c", "--zstd", "-f"
+            , ghcVersionPretty <.> "pak" <.> "tar" <.> "zst"
+            , ghcVersionPretty ]
+
+collectUnitDirs :: FilePath -> IO [FilePath]
+collectUnitDirs dir = do
+  subdirs <- IO.listDirectories dir
+  if any ((== "extra-compilation-artifacts") . takeFileName) subdirs
+    then pure [dir]
+    else concat <$> mapM collectUnitDirs subdirs
diff --git a/stack.yaml b/stack.yaml
index 8c636a1..27c0da1 100644
--- a/stack.yaml
+++ b/stack.yaml
@@ -6,6 +6,7 @@ packages:
 - '.'
 - '../utils/ghc-toolchain'
 - '../libraries/ghc-platform'
+- 'deps/Cabal-3.10.3.0'
 
 nix:
    enable: false
@@ -19,5 +20,4 @@ nix:
    - ghc-toolchain
 
 extra-deps:
-   - Cabal-3.10.1.0
    - Cabal-syntax-3.10.1.0
-- 
2.43.0

